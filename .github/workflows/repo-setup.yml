# Repository Setup and Initialization Workflow
# Handles setting up new repositories with Best Practices SDK standards

name: Repository Setup & Initialization

on:
  workflow_dispatch:
    inputs:
      repository_name:
        description: 'Name for the new repository'
        required: true
        type: string
      repository_description:
        description: 'Description for the repository'
        required: false
        type: string
      template_type:
        description: 'Template type to use'
        required: true
        default: 'web-app'
        type: choice
        options:
          - 'web-app'
          - 'api'
          - 'library'
          - 'cli'
      is_private:
        description: 'Make repository private'
        required: false
        default: false
        type: boolean
      setup_ci:
        description: 'Setup GitHub Actions CI/CD'
        required: false
        default: true
        type: boolean
      enable_branch_protection:
        description: 'Enable branch protection rules'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18.x'

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    
    outputs:
      repo-name: ${{ steps.validate.outputs.repo-name }}
      repo-description: ${{ steps.validate.outputs.repo-description }}
      
    steps:
      - name: Validate Repository Name
        id: validate
        run: |
          repo_name="${{ github.event.inputs.repository_name }}"
          
          # Validate repository name format
          if [[ ! "$repo_name" =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "❌ Invalid repository name. Use only letters, numbers, dots, hyphens, and underscores."
            exit 1
          fi
          
          # Convert to lowercase and replace spaces
          repo_name=$(echo "$repo_name" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          
          echo "✅ Repository name validated: $repo_name"
          echo "repo-name=$repo_name" >> $GITHUB_OUTPUT
          
          # Set description
          description="${{ github.event.inputs.repository_description }}"
          if [ -z "$description" ]; then
            description="Repository created with Best Practices SDK"
          fi
          echo "repo-description=$description" >> $GITHUB_OUTPUT

  create-repository:
    name: Create GitHub Repository
    runs-on: ubuntu-latest
    needs: validate-inputs
    
    outputs:
      repository-url: ${{ steps.create.outputs.repository-url }}
      
    steps:
      - name: Create Repository
        id: create
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_name="${{ needs.validate-inputs.outputs.repo-name }}"
          description="${{ needs.validate-inputs.outputs.repo-description }}"
          
          # Check if repository already exists
          if gh repo view "${{ github.repository_owner }}/$repo_name" >/dev/null 2>&1; then
            echo "⚠️ Repository $repo_name already exists"
            repo_url="https://github.com/${{ github.repository_owner }}/$repo_name"
            echo "Using existing repository: $repo_url"
          else
            # Create new repository
            visibility_flag=""
            if [ "${{ github.event.inputs.is_private }}" = "true" ]; then
              visibility_flag="--private"
            else
              visibility_flag="--public"
            fi
            
            gh repo create "${{ github.repository_owner }}/$repo_name" \
              --description "$description" \
              $visibility_flag \
              --clone=false
            
            repo_url="https://github.com/${{ github.repository_owner }}/$repo_name"
            echo "✅ Repository created: $repo_url"
          fi
          
          echo "repository-url=$repo_url" >> $GITHUB_OUTPUT

  initialize-repository:
    name: Initialize Repository Structure
    runs-on: ubuntu-latest
    needs: [validate-inputs, create-repository]
    
    steps:
      - name: Checkout Best Practices SDK
        uses: actions/checkout@v4
        with:
          path: 'sdk'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'sdk/package.json'
      
      - name: Install SDK Dependencies
        run: |
          cd sdk
          npm ci
      
      - name: Clone Target Repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_name="${{ needs.validate-inputs.outputs.repo-name }}"
          gh repo clone "${{ github.repository_owner }}/$repo_name" target-repo
      
      - name: Initialize with Best Practices SDK
        run: |
          cd target-repo
          
          # Initialize project using SDK
          ../sdk/cli/bp-init.js \
            --name "${{ needs.validate-inputs.outputs.repo-name }}" \
            --template "${{ github.event.inputs.template_type }}" \
            --description "${{ needs.validate-inputs.outputs.repo-description }}"
          
          # Copy SDK templates to project
          if [ -d "../sdk/templates/${{ github.event.inputs.template_type }}" ]; then
            cp -r ../sdk/templates/${{ github.event.inputs.template_type }}"/* . || true
          fi
          
          # Copy general templates
          cp -r ../sdk/templates/common/* . 2>/dev/null || true
      
      - name: Setup GitHub Actions Workflows
        if: github.event.inputs.setup_ci == 'true'
        run: |
          cd target-repo
          
          # Create .github/workflows directory
          mkdir -p .github/workflows
          
          # Copy CI/CD templates
          cp ../sdk/templates/ci-pipeline.yml .github/workflows/ci.yml
          cp ../sdk/.github/workflows/auto-pr.yml .github/workflows/
          cp ../sdk/.github/workflows/auto-merge.yml .github/workflows/
          
          # Customize workflows for this project
          sed -i "s/{{REPO_NAME}}/${{ needs.validate-inputs.outputs.repo-name }}/g" .github/workflows/*.yml
          sed -i "s/{{TEMPLATE_TYPE}}/${{ github.event.inputs.template_type }}/g" .github/workflows/*.yml
      
      - name: Create Project Files
        run: |
          cd target-repo
          
          # Create README.md if it doesn't exist
          if [ ! -f README.md ]; then
            cat > README.md << EOF
          # ${{ needs.validate-inputs.outputs.repo-name }}
          
          ${{ needs.validate-inputs.outputs.repo-description }}
          
          ## 🚀 Built with Best Practices SDK
          
          This project follows enterprise-grade best practices for:
          - ✅ Code Quality & Standards
          - 🔒 Security Scanning
          - ⚡ Performance Optimization
          - 📚 Documentation Generation
          - 🤖 Automated CI/CD
          
          ## Getting Started
          
          \`\`\`bash
          # Install dependencies
          npm install
          
          # Run development server
          npm run dev
          
          # Run tests
          npm test
          
          # Validate with Best Practices SDK
          npx bp validate
          \`\`\`
          
          ## Scripts
          
          - \`npm start\` - Start the application
          - \`npm run dev\` - Start development mode with hot reload
          - \`npm test\` - Run test suite
          - \`npm run lint\` - Run code linting
          - \`npm run build\` - Build for production
          - \`npm run validate\` - Run Best Practices validation
          
          ## Best Practices Compliance
          
          This project maintains high standards through automated validation:
          
          [![CI Status](https://github.com/${{ github.repository_owner }}/${{ needs.validate-inputs.outputs.repo-name }}/workflows/CI%20Pipeline/badge.svg)](https://github.com/${{ github.repository_owner }}/${{ needs.validate-inputs.outputs.repo-name }}/actions)
          [![Security](https://github.com/${{ github.repository_owner }}/${{ needs.validate-inputs.outputs.repo-name }}/workflows/Security%20Scan/badge.svg)](https://github.com/${{ github.repository_owner }}/${{ needs.validate-inputs.outputs.repo-name }}/actions)
          [![Best Practices](https://img.shields.io/badge/Best%20Practices-SDK-blue)](https://github.com/ramsaptami/code-directives)
          
          ## License
          
          MIT License - see [LICENSE](LICENSE) file for details.
          EOF
          fi
          
          # Create basic CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            cat > CHANGELOG.md << EOF
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          ## [Unreleased]
          
          ## [1.0.0] - $(date +%Y-%m-%d)
          
          ### Added
          - Initial project setup with Best Practices SDK
          - Automated CI/CD pipeline
          - Security scanning and validation
          - Performance monitoring
          - Documentation generation
          EOF
          fi
          
          # Create LICENSE file
          if [ ! -f LICENSE ]; then
            cat > LICENSE << EOF
          MIT License
          
          Copyright (c) $(date +%Y) ${{ github.repository_owner }}
          
          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:
          
          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.
          
          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.
          EOF
          fi
      
      - name: Run Initial Validation
        run: |
          cd target-repo
          
          # Install dependencies if package.json exists
          if [ -f package.json ]; then
            npm install
          fi
          
          # Run Best Practices validation
          ../sdk/cli/bp-validate.js --fix --standards code,security
          
          echo "✅ Initial validation completed"
      
      - name: Commit Initial Setup
        run: |
          cd target-repo
          
          # Configure git
          git config user.name "Best Practices SDK"
          git config user.email "sdk@bestpractices.dev"
          
          # Stage all files
          git add -A
          
          # Commit initial setup
          git commit -m "feat: initial project setup with Best Practices SDK
          
          - Added project structure based on ${{ github.event.inputs.template_type }} template
          - Configured GitHub Actions CI/CD pipeline
          - Set up automated validation and security scanning
          - Created documentation templates
          - Configured best practices compliance tools
          
          🤖 Generated by Best Practices SDK
          
          Co-Authored-By: Best Practices SDK <sdk@bestpractices.dev>"
          
          # Push to main branch
          git push origin main
      
      - name: Setup Branch Protection
        if: github.event.inputs.enable_branch_protection == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_name="${{ needs.validate-inputs.outputs.repo-name }}"
          
          # Wait a moment for the repository to be fully ready
          sleep 5
          
          # Configure branch protection for main branch
          gh api repos/${{ github.repository_owner }}/$repo_name/branches/main/protection \
            --method PUT \
            --field required_status_checks='{"strict":true,"contexts":["quality","test","security"]}' \
            --field enforce_admins=true \
            --field required_pull_request_reviews='{"required_approving_review_count":1,"dismiss_stale_reviews":true}' \
            --field restrictions=null || echo "⚠️ Branch protection setup failed - may need manual configuration"

  post-setup:
    name: Post-Setup Tasks
    runs-on: ubuntu-latest
    needs: [validate-inputs, create-repository, initialize-repository]
    if: always()
    
    steps:
      - name: Generate Setup Summary
        run: |
          echo "## 🎉 Repository Setup Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** [${{ needs.validate-inputs.outputs.repo-name }}](${{ needs.create-repository.outputs.repository-url }})" >> $GITHUB_STEP_SUMMARY
          echo "**Description:** ${{ needs.validate-inputs.outputs.repo-description }}" >> $GITHUB_STEP_SUMMARY
          echo "**Template:** ${{ github.event.inputs.template_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Visibility:** ${{ github.event.inputs.is_private == 'true' && 'Private' || 'Public' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Features Configured" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 Project structure based on ${{ github.event.inputs.template_type }} template" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 Documentation templates (README, CHANGELOG, LICENSE)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.setup_ci }}" = "true" ]; then
            echo "- 🤖 GitHub Actions CI/CD pipeline" >> $GITHUB_STEP_SUMMARY
            echo "- 🔄 Automated PR creation and merging" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ github.event.inputs.enable_branch_protection }}" = "true" ]; then
            echo "- 🛡️ Branch protection rules" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- ✅ Best Practices SDK validation" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security scanning configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Clone your new repository: \`git clone ${{ needs.create-repository.outputs.repository-url }}.git\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Navigate to the directory: \`cd ${{ needs.validate-inputs.outputs.repo-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Install dependencies: \`npm install\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Start development: \`npm run dev\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Visit your new repository: ${{ needs.create-repository.outputs.repository-url }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Repository Setup Status
        run: |
          if [ "${{ needs.initialize-repository.result }}" = "success" ]; then
            echo "✅ Repository setup completed successfully!"
            echo "🎯 Your new repository is ready for development"
            echo "📍 URL: ${{ needs.create-repository.outputs.repository-url }}"
          else
            echo "❌ Repository setup encountered issues"
            echo "Please check the logs and try again"
            exit 1
          fi