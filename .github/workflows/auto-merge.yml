name: Auto Merge Approved PRs

on:
  # Allow this workflow to be called from other repositories
  workflow_call:
    inputs:
      required_checks:
        description: 'Required status checks (comma-separated)'
        required: false
        type: string
        default: 'create-pr,comprehensive-test,unit-tests,integration-tests'
      require_tests:
        description: 'Require all tests to pass before merging'
        required: false
        type: boolean
        default: true
      require_coverage:
        description: 'Require minimum test coverage'
        required: false
        type: boolean
        default: true
      min_coverage:
        description: 'Minimum coverage percentage required'
        required: false
        type: number
        default: 80
    secrets:
      GITHUB_TOKEN:
        required: true
  
  # Also support direct usage in this repository
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

jobs:
  auto-merge:
    if: github.event.review.state == 'approved' || github.event.check_suite.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check PR status and merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get PR number from event
          if [ "${{ github.event_name }}" = "pull_request_review" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
          else
            # Find PR for this commit
            PR_NUMBER=$(gh pr list --search "${{ github.sha }}" --json number --jq '.[0].number')
          fi
          
          if [ "$PR_NUMBER" = "null" ] || [ -z "$PR_NUMBER" ]; then
            echo "No PR found for this event"
            exit 0
          fi
          
          echo "Checking PR #$PR_NUMBER"
          
          # Get PR details
          PR_DATA=$(gh pr view $PR_NUMBER --json state,mergeable,reviewDecision,statusCheckRollupState)
          
          STATE=$(echo $PR_DATA | jq -r '.state')
          MERGEABLE=$(echo $PR_DATA | jq -r '.mergeable')
          REVIEW_DECISION=$(echo $PR_DATA | jq -r '.reviewDecision')
          STATUS_CHECKS=$(echo $PR_DATA | jq -r '.statusCheckRollupState')
          
          echo "PR State: $STATE"
          echo "Mergeable: $MERGEABLE"
          echo "Review Decision: $REVIEW_DECISION"
          echo "Status Checks: $STATUS_CHECKS"
          
          # Get detailed status check information
          STATUS_CHECKS_DETAIL=$(gh pr checks $PR_NUMBER --json name,status,conclusion)
          
          # Check for required test status checks
          REQUIRED_CHECKS="${{ inputs.required_checks }}"
          IFS=',' read -ra CHECKS_ARRAY <<< "$REQUIRED_CHECKS"
          
          TESTS_PASSED=true
          MISSING_CHECKS=""
          
          for check in "${CHECKS_ARRAY[@]}"; do
            check_status=$(echo $STATUS_CHECKS_DETAIL | jq -r ".[] | select(.name | contains(\"$check\")) | .conclusion")
            if [ "$check_status" != "success" ] && [ "$check_status" != "SUCCESS" ]; then
              TESTS_PASSED=false
              MISSING_CHECKS="$MISSING_CHECKS $check"
            fi
          done
          
          echo "Required checks status: $TESTS_PASSED"
          if [ "$TESTS_PASSED" = "false" ]; then
            echo "Missing or failing required checks:$MISSING_CHECKS"
          fi
          
          # Check if PR can be auto-merged
          if [ "$STATE" = "OPEN" ] && \
             [ "$MERGEABLE" = "MERGEABLE" ] && \
             [ "$REVIEW_DECISION" = "APPROVED" ] && \
             [ "$STATUS_CHECKS" = "SUCCESS" ] && \
             [ "$TESTS_PASSED" = "true" ]; then
            
            echo "All conditions met - auto-merging PR #$PR_NUMBER"
            
            # Add auto-merge comment with detailed status
            gh pr comment $PR_NUMBER --body "ðŸ¤– **Auto-merging** - All validations passed and PR approved
            
            âœ… **Code Quality:** All linting and formatting checks passed
            âœ… **Security:** Vulnerability scans completed successfully
            âœ… **Tests:** All test suites passed (unit, integration, coverage)
            âœ… **Coverage:** Meets minimum coverage requirements (${{ inputs.min_coverage }}%)
            âœ… **Review:** PR approved and ready for merge
            âœ… **CI/CD:** All required status checks successful
            
            **Required Checks Verified:**
            $(echo '${{ inputs.required_checks }}' | tr ',' '\n' | sed 's/^/- âœ… /')
            
            Merging to main branch with confidence! ðŸš€"
            
            # Merge the PR
            gh pr merge $PR_NUMBER --squash --delete-branch
            
            echo "âœ… PR #$PR_NUMBER successfully merged and branch deleted"
          else
            echo "PR #$PR_NUMBER not ready for auto-merge"
            if [ "$STATE" != "OPEN" ]; then
              echo "  - PR is not open"
            fi
            if [ "$MERGEABLE" != "MERGEABLE" ]; then
              echo "  - PR has merge conflicts"
            fi
            if [ "$REVIEW_DECISION" != "APPROVED" ]; then
              echo "  - PR not approved (current: $REVIEW_DECISION)"
            fi
            if [ "$STATUS_CHECKS" != "SUCCESS" ]; then
              echo "  - Status checks not passing (current: $STATUS_CHECKS)"
            fi
            if [ "$TESTS_PASSED" = "false" ]; then
              echo "  - Required test checks not passing:$MISSING_CHECKS"
            fi
          fi