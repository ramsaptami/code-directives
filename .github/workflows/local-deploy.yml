# Local SDK to GitHub Deployment Workflow
# This workflow handles the deployment of locally developed SDKs to GitHub repositories

name: Local SDK Deployment

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository for deployment (owner/repo)'
        required: true
        type: string
      branch_name:
        description: 'Branch name to create/update'
        required: false
        default: 'feature/sdk-update'
        type: string
      commit_message:
        description: 'Commit message for deployment'
        required: false
        default: 'Update SDK with latest changes'
        type: string
      create_pr:
        description: 'Create pull request after deployment'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18.x'

jobs:
  validate-local-sdk:
    name: Validate Local SDK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Local SDK
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Run Best Practices Validation
        run: |
          npx bp validate --standards code,security,performance
          npx bp audit --output sdk-audit.json
      
      - name: Run Tests
        run: npm test
      
      - name: Build SDK
        run: npm run build
      
      - name: Upload Audit Report
        uses: actions/upload-artifact@v3
        with:
          name: sdk-audit-report
          path: sdk-audit.json

  deploy-to-github:
    name: Deploy to GitHub Repository
    runs-on: ubuntu-latest
    needs: validate-local-sdk
    
    steps:
      - name: Checkout Local SDK
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: 'local-sdk'
      
      - name: Setup Git Configuration
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Clone Target Repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh repo clone ${{ github.event.inputs.target_repo }} target-repo
      
      - name: Create/Switch to Deployment Branch
        run: |
          cd target-repo
          
          # Fetch all branches
          git fetch origin
          
          # Check if branch exists remotely
          if git ls-remote --exit-code --heads origin ${{ github.event.inputs.branch_name }}; then
            echo "Branch exists, checking out and updating"
            git checkout ${{ github.event.inputs.branch_name }}
            git pull origin ${{ github.event.inputs.branch_name }}
          else
            echo "Creating new branch"
            git checkout -b ${{ github.event.inputs.branch_name }}
          fi
      
      - name: Sync SDK Changes
        run: |
          # Copy SDK files to target repository
          rsync -av --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='dist' \
            --exclude='build' \
            --exclude='coverage' \
            --exclude='*.log' \
            local-sdk/ target-repo/
          
          cd target-repo
          
          # Stage all changes
          git add -A
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "Changes detected, will commit"
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi
      
      - name: Commit Changes
        if: env.HAS_CHANGES == 'true'
        run: |
          cd target-repo
          
          git commit -m "${{ github.event.inputs.commit_message }}
          
          🤖 Auto-deployed from local SDK
          
          - Validated with Best Practices SDK
          - All tests passing
          - Security scanned
          - Performance benchmarked
          
          Co-Authored-By: GitHub Actions <actions@github.com>"
      
      - name: Push Changes
        if: env.HAS_CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd target-repo
          git push origin ${{ github.event.inputs.branch_name }}
          
          echo "BRANCH_PUSHED=true" >> $GITHUB_ENV
          echo "PUSHED_BRANCH=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
      
      - name: Create Pull Request
        if: env.HAS_CHANGES == 'true' && env.BRANCH_PUSHED == 'true' && github.event.inputs.create_pr == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd target-repo
          
          # Check if PR already exists
          existing_pr=$(gh pr list --head ${{ github.event.inputs.branch_name }} --json number --jq '.[0].number')
          
          if [ "$existing_pr" = "null" ] || [ -z "$existing_pr" ]; then
            # Create new PR
            gh pr create \
              --title "🚀 SDK Update: ${{ github.event.inputs.commit_message }}" \
              --body "## SDK Deployment from Local Development
              
            **Source:** Local SDK Development
            **Branch:** \`${{ github.event.inputs.branch_name }}\`
            **Deployed by:** @${{ github.actor }}
            
            ### 🔍 Validation Results
            - ✅ Best Practices validation passed
            - ✅ All tests passing
            - ✅ Security scan clean
            - ✅ Performance benchmarks met
            
            ### 📋 Changes Included
            ${{ github.event.inputs.commit_message }}
            
            ### 🤖 Automated Deployment
            This PR was created automatically by the Local SDK Deployment workflow.
            
            **Next Steps:**
            1. Review the changes
            2. Run additional tests if needed
            3. Merge when ready
            
            ---
            *Deployed via [Local SDK Deployment Workflow](https://github.com/${{ github.repository }}/actions)*" \
              --assignee ${{ github.actor }}
            
            echo "✅ Pull request created successfully"
          else
            echo "ℹ️ PR already exists: #$existing_pr"
            
            # Update existing PR with comment
            gh pr comment $existing_pr --body "🔄 **SDK Updated**
            
            New changes have been pushed to this branch:
            - Commit: ${{ github.event.inputs.commit_message }}
            - Deployed by: @${{ github.actor }}
            - Timestamp: $(date -u)
            
            All validation checks have passed ✅"
          fi

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-to-github
    if: always()
    
    steps:
      - name: Download Audit Report
        uses: actions/download-artifact@v3
        with:
          name: sdk-audit-report
      
      - name: Post Deployment Summary
        run: |
          echo "## 📊 SDK Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Repository:** ${{ github.event.inputs.target_repo }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.event.inputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit Message:** ${{ github.event.inputs.commit_message }}" >> $GITHUB_STEP_SUMMARY
          echo "**Create PR:** ${{ github.event.inputs.create_pr }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "sdk-audit.json" ]; then
            echo "### 🔍 Audit Results" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics from audit report
            overall_score=$(jq -r '.overallScore // "N/A"' sdk-audit.json)
            total_issues=$(jq -r '.summary.totalIssues // 0' sdk-audit.json)
            critical_issues=$(jq -r '.summary.criticalIssues // 0' sdk-audit.json)
            
            echo "- **Overall Score:** ${overall_score}/100" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Issues:** ${total_issues}" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical Issues:** ${critical_issues}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-to-github.result }}" = "success" ]; then
            echo "✅ **SUCCESS:** SDK deployed successfully to GitHub" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED:** SDK deployment encountered issues" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Cleanup
        run: |
          echo "🧹 Cleaning up deployment artifacts..."
          rm -f sdk-audit.json
          echo "✅ Cleanup completed"