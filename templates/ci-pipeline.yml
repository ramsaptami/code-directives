# GitHub Actions CI/CD Pipeline Template for Best Practices SDK
# This template provides comprehensive CI/CD with automated testing, security scanning, and deployment

name: Best Practices CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan on Mondays

env:
  NODE_VERSION: '18.x'
  CACHE_VERSION: 'v1'

jobs:
  # Quality checks and validation
  quality:
    name: Code Quality & Standards
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Run Best Practices Validation
        run: |
          npx bp validate --standards code,security --fix
          npx bp validate --report --output validation-report.json
      
      - name: Run Linting
        run: npm run lint
        continue-on-error: false
      
      - name: Check Code Formatting
        run: |
          npm run format:check || (echo "Code formatting issues found. Run 'npm run format' to fix." && exit 1)
      
      - name: Upload Validation Report
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: validation-report.json
        if: always()

  # Comprehensive testing across Node versions
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Run Unit Tests
        run: npm run test:unit -- --coverage --verbose
      
      - name: Run Integration Tests
        run: npm run test:integration
        env:
          NODE_ENV: test
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # Security scanning and vulnerability assessment
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Run Security Audit
        run: |
          npm audit --audit-level=moderate
          npx bp validate --standards security --report
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Run Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Performance benchmarking
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build Project
        run: npm run build
      
      - name: Run Performance Validation
        run: |
          npx bp validate --standards performance
          npm run benchmark || echo "No benchmark script found"
      
      - name: Bundle Size Analysis
        run: |
          echo "### Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -d "dist" ]; then
            du -sh dist/* >> $GITHUB_STEP_SUMMARY
          elif [ -d "build" ]; then
            du -sh build/* >> $GITHUB_STEP_SUMMARY
          else
            echo "No build artifacts found" >> $GITHUB_STEP_SUMMARY
          fi

  # Documentation generation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Generate Documentation
        run: |
          npx bp docs --source ./src --output ./docs --diagrams
          npm run docs:build || echo "No docs build script found"
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
        if: success()

  # Release automation
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test, security, performance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build Project
        run: npm run build
      
      - name: Run Final Validation
        run: npx bp validate --standards code,security,performance
      
      - name: Generate Changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
      
      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Check if this is a new version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Create git tag if doesn't exist
          if ! git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "v$CURRENT_VERSION" -m "Release v$CURRENT_VERSION"
            git push origin "v$CURRENT_VERSION"
          fi
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Check if release already exists
          if ! gh release view "v$CURRENT_VERSION" >/dev/null 2>&1; then
            gh release create "v$CURRENT_VERSION" \
              --title "Release v$CURRENT_VERSION" \
              --generate-notes \
              --draft=false \
              --prerelease=false
          fi
      
      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Only publish if not already published
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          if ! npm view "$PACKAGE_NAME@$CURRENT_VERSION" >/dev/null 2>&1; then
            npm publish --access public
          else
            echo "Version $CURRENT_VERSION already published to NPM"
          fi

  # Deployment to staging/production
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build for Production
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to production..."
          # Add your deployment commands here
          # Examples:
          # - Deploy to AWS S3/CloudFront
          # - Deploy to Vercel/Netlify
          # - Deploy to Docker registry
          # - Deploy to Kubernetes
          echo "✅ Deployment completed successfully"

  # Cleanup and notifications
  cleanup:
    name: Cleanup & Notify
    runs-on: ubuntu-latest
    needs: [quality, test, security, performance, docs, release, deploy]
    if: always()
    
    steps:
      - name: Cleanup Artifacts
        run: |
          echo "🧹 Cleaning up temporary artifacts..."
          # Add cleanup commands if needed
      
      - name: Notify Success
        if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' }}
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "📊 All quality gates passed"
          echo "🔒 Security checks passed"
          echo "⚡ Performance benchmarks met"
      
      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Pipeline failed!"
          echo "Please check the failed jobs and fix issues before merging."